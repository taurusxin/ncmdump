/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "tag.h"
#include "fileref.h"
#include "tpropertymap.h"
#include "tlist.h"
using namespace TagLib;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1ListPrivateBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TagLib::ListPrivateBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TagLib::ListPrivateBase *)new TagLib::ListPrivateBase();
  *(TagLib::ListPrivateBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_ListPrivateBase_1autoDelete_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TagLib::ListPrivateBase *arg1 = (TagLib::ListPrivateBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::ListPrivateBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoDelete = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_ListPrivateBase_1autoDelete_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TagLib::ListPrivateBase *arg1 = (TagLib::ListPrivateBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::ListPrivateBase **)&jarg1; 
  result = (bool) ((arg1)->autoDelete);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1ListPrivateBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::ListPrivateBase *arg1 = (TagLib::ListPrivateBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::ListPrivateBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1listString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TagLib::List< String > *)new TagLib::List< String >();
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1listString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::List< String > const & reference is null");
    return 0;
  } 
  result = (TagLib::List< String > *)new TagLib::List< String >((TagLib::List< String > const &)*arg1);
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1listString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String >::Iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  result = (arg1)->begin();
  *(TagLib::List< String >::Iterator **)&jresult = new TagLib::List< String >::Iterator((const TagLib::List< String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String >::Iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  result = (arg1)->end();
  *(TagLib::List< String >::Iterator **)&jresult = new TagLib::List< String >::Iterator((const TagLib::List< String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String >::Iterator arg2 ;
  String *arg3 = 0 ;
  TagLib::List< String >::Iterator *argp2 ;
  TagLib::List< String >::Iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  argp2 = *(TagLib::List< String >::Iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TagLib::List< String >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  {
    arg3 = new String(jenv->GetStringUTFChars(jarg3, 0));
  }
  result = (arg1)->insert(arg2,(String const &)*arg3);
  *(TagLib::List< String >::Iterator **)&jresult = new TagLib::List< String >::Iterator((const TagLib::List< String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1sortedInsert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *arg2 = 0 ;
  bool arg3 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  arg3 = jarg3 ? true : false; 
  result = (TagLib::List< String > *) &(arg1)->sortedInsert((String const &)*arg2,arg3);
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1sortedInsert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *arg2 = 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (TagLib::List< String > *) &(arg1)->sortedInsert((String const &)*arg2);
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *arg2 = 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (TagLib::List< String > *) &(arg1)->append((String const &)*arg2);
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String > *arg2 = 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  arg2 = *(TagLib::List< String > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::List< String > const & reference is null");
    return 0;
  } 
  result = (TagLib::List< String > *) &(arg1)->append((TagLib::List< String > const &)*arg2);
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1prepend_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *arg2 = 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (TagLib::List< String > *) &(arg1)->prepend((String const &)*arg2);
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1prepend_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String > *arg2 = 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  arg2 = *(TagLib::List< String > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::List< String > const & reference is null");
    return 0;
  } 
  result = (TagLib::List< String > *) &(arg1)->prepend((TagLib::List< String > const &)*arg2);
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  result = (TagLib::List< String > *) &(arg1)->clear();
  *(TagLib::List< String > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  result = (unsigned int)((TagLib::List< String > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_listString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  result = (bool)((TagLib::List< String > const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *arg2 = 0 ;
  TagLib::List< String >::Iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (arg1)->find((String const &)*arg2);
  *(TagLib::List< String >::Iterator **)&jresult = new TagLib::List< String >::Iterator((const TagLib::List< String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_listString_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (bool)((TagLib::List< String > const *)arg1)->contains((String const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_listString_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String >::Iterator arg2 ;
  TagLib::List< String >::Iterator *argp2 ;
  TagLib::List< String >::Iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  argp2 = *(TagLib::List< String >::Iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TagLib::List< String >::Iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(TagLib::List< String >::Iterator **)&jresult = new TagLib::List< String >::Iterator((const TagLib::List< String >::Iterator &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_listString_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  result = (String *) &((TagLib::List< String > const *)arg1)->front();
  {
    jresult = jenv->NewStringUTF(result->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_listString_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  result = (String *) &((TagLib::List< String > const *)arg1)->back();
  {
    jresult = jenv->NewStringUTF(result->toCString(true));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_listString_1setAutoDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoDelete(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_listString_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  unsigned int arg2 ;
  String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (String *) &(arg1)->operator [](arg2);
  {
    jresult = jenv->NewStringUTF(result->toCString(true));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_listString_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  arg2 = *(TagLib::List< String > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::List< String > & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_listString_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TagLib::List< String > *arg1 = (TagLib::List< String > *) 0 ;
  TagLib::List< String > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::List< String > **)&jarg1; 
  arg2 = *(TagLib::List< String > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::List< String > const & reference is null");
    return 0;
  } 
  result = (bool)((TagLib::List< String > const *)arg1)->operator ==((TagLib::List< String > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1StringList_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TagLib::StringList *)new TagLib::StringList();
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1StringList_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::StringList *arg1 = 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::StringList **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::StringList const & reference is null");
    return 0;
  } 
  result = (TagLib::StringList *)new TagLib::StringList((TagLib::StringList const &)*arg1);
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1StringList_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  String *arg1 = 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = new String(jenv->GetStringUTFChars(jarg1, 0));
  }
  result = (TagLib::StringList *)new TagLib::StringList((String const &)*arg1);
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1StringList_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  ByteVectorList *arg1 = 0 ;
  String::Type arg2 ;
  String::Type *argp2 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ByteVectorList **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ByteVectorList const & reference is null");
    return 0;
  } 
  argp2 = *(String::Type **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null String::Type");
    return 0;
  }
  arg2 = *argp2; 
  result = (TagLib::StringList *)new TagLib::StringList((ByteVectorList const &)*arg1,arg2);
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1StringList_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  ByteVectorList *arg1 = 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ByteVectorList **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ByteVectorList const & reference is null");
    return 0;
  } 
  result = (TagLib::StringList *)new TagLib::StringList((ByteVectorList const &)*arg1);
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1StringList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::StringList **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_StringList_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  String *arg2 = 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::StringList **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = ((TagLib::StringList const *)arg1)->toString((String const &)*arg2);
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_StringList_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::StringList **)&jarg1; 
  result = ((TagLib::StringList const *)arg1)->toString();
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_StringList_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  String *arg2 = 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::StringList **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (TagLib::StringList *) &(arg1)->append((String const &)*arg2);
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_StringList_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TagLib::StringList *arg1 = (TagLib::StringList *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::StringList **)&jarg1; 
  arg2 = *(TagLib::StringList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::StringList const & reference is null");
    return 0;
  } 
  result = (TagLib::StringList *) &(arg1)->append((TagLib::StringList const &)*arg2);
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_StringList_1split(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  String *arg1 = 0 ;
  String *arg2 = 0 ;
  TagLib::StringList result;
  
  (void)jenv;
  (void)jcls;
  {
    arg1 = new String(jenv->GetStringUTFChars(jarg1, 0));
  }
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = TagLib::StringList::split((String const &)*arg1,(String const &)*arg2);
  *(TagLib::StringList **)&jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1PropertyMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TagLib::PropertyMap *)new TagLib::PropertyMap();
  *(TagLib::PropertyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1PropertyMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *arg1 = 0 ;
  TagLib::PropertyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::PropertyMap const & reference is null");
    return 0;
  } 
  result = (TagLib::PropertyMap *)new TagLib::PropertyMap((TagLib::PropertyMap const &)*arg1);
  *(TagLib::PropertyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1PropertyMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  TagLib::SimplePropertyMap *arg1 = 0 ;
  TagLib::PropertyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::SimplePropertyMap **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::SimplePropertyMap const & reference is null");
    return 0;
  } 
  result = (TagLib::PropertyMap *)new TagLib::PropertyMap((TagLib::SimplePropertyMap const &)*arg1);
  *(TagLib::PropertyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1PropertyMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  String *arg2 = 0 ;
  TagLib::StringList *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  arg3 = *(TagLib::StringList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::StringList const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->insert((String const &)*arg2,(TagLib::StringList const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1replace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  String *arg2 = 0 ;
  TagLib::StringList *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  arg3 = *(TagLib::StringList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::StringList const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->replace((String const &)*arg2,(TagLib::StringList const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  String *arg2 = 0 ;
  SwigValueWrapper< Map< String,TagLib::StringList >::Iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (arg1)->find((String const &)*arg2);
  *(TagLib::PropertyMap::Iterator **)&jresult = new TagLib::PropertyMap::Iterator((const TagLib::PropertyMap::Iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1contains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  String *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (bool)((TagLib::PropertyMap const *)arg1)->contains((String const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1contains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  TagLib::PropertyMap *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  arg2 = *(TagLib::PropertyMap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::PropertyMap const & reference is null");
    return 0;
  } 
  result = (bool)((TagLib::PropertyMap const *)arg1)->contains((TagLib::PropertyMap const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  String *arg2 = 0 ;
  TagLib::PropertyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (TagLib::PropertyMap *) &(arg1)->erase((String const &)*arg2);
  *(TagLib::PropertyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  TagLib::PropertyMap *arg2 = 0 ;
  TagLib::PropertyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  arg2 = *(TagLib::PropertyMap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::PropertyMap const & reference is null");
    return 0;
  } 
  result = (TagLib::PropertyMap *) &(arg1)->erase((TagLib::PropertyMap const &)*arg2);
  *(TagLib::PropertyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  TagLib::PropertyMap *arg2 = 0 ;
  TagLib::PropertyMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  arg2 = *(TagLib::PropertyMap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::PropertyMap const & reference is null");
    return 0;
  } 
  result = (TagLib::PropertyMap *) &(arg1)->merge((TagLib::PropertyMap const &)*arg2);
  *(TagLib::PropertyMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  String *arg2 = 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  result = (TagLib::StringList *) &((TagLib::PropertyMap const *)arg1)->operator []((String const &)*arg2);
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  TagLib::PropertyMap *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  arg2 = *(TagLib::PropertyMap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::PropertyMap const & reference is null");
    return 0;
  } 
  result = (bool)((TagLib::PropertyMap const *)arg1)->operator ==((TagLib::PropertyMap const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1unsupportedData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  TagLib::StringList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  result = (TagLib::StringList *) &(arg1)->unsupportedData();
  *(TagLib::StringList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1removeEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  (arg1)->removeEmpty();
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_PropertyMap_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::PropertyMap *arg1 = (TagLib::PropertyMap *) 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::PropertyMap **)&jarg1; 
  result = ((TagLib::PropertyMap const *)arg1)->toString();
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1Tag(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::Tag **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1properties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::PropertyMap result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = ((TagLib::Tag const *)arg1)->properties();
  *(TagLib::PropertyMap **)&jresult = new TagLib::PropertyMap((const TagLib::PropertyMap &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1removeUnsupportedProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::StringList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  arg2 = *(TagLib::StringList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::StringList const & reference is null");
    return ;
  } 
  (arg1)->removeUnsupportedProperties((TagLib::StringList const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::PropertyMap *arg2 = 0 ;
  TagLib::PropertyMap result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  arg2 = *(TagLib::PropertyMap **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::PropertyMap const & reference is null");
    return 0;
  } 
  result = (arg1)->setProperties((TagLib::PropertyMap const &)*arg2);
  *(TagLib::PropertyMap **)&jresult = new TagLib::PropertyMap((const TagLib::PropertyMap &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = ((TagLib::Tag const *)arg1)->title();
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1artist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = ((TagLib::Tag const *)arg1)->artist();
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1album(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = ((TagLib::Tag const *)arg1)->album();
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1comment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = ((TagLib::Tag const *)arg1)->comment();
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1genre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = ((TagLib::Tag const *)arg1)->genre();
  {
    jresult = jenv->NewStringUTF((&result)->toCString(true));
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1year(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = (unsigned int)((TagLib::Tag const *)arg1)->year();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1track(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = (unsigned int)((TagLib::Tag const *)arg1)->track();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  (arg1)->setTitle((String const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setArtist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  (arg1)->setArtist((String const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setAlbum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  (arg1)->setAlbum((String const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  (arg1)->setComment((String const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setGenre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  {
    arg2 = new String(jenv->GetStringUTFChars(jarg2, 0));
  }
  (arg1)->setGenre((String const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setYear(arg2);
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1setTrack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setTrack(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  result = (bool)((TagLib::Tag const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1duplicate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::Tag *arg2 = (TagLib::Tag *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  arg2 = *(TagLib::Tag **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  TagLib::Tag::duplicate((TagLib::Tag const *)arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_Tag_1duplicate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TagLib::Tag *arg1 = (TagLib::Tag *) 0 ;
  TagLib::Tag *arg2 = (TagLib::Tag *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::Tag **)&jarg1; 
  arg2 = *(TagLib::Tag **)&jarg2; 
  TagLib::Tag::duplicate((TagLib::Tag const *)arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1FileTypeResolver_1createFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  TagLib::FileRef::FileTypeResolver *arg1 = (TagLib::FileRef::FileTypeResolver *) 0 ;
  FileName arg2 = (FileName) 0 ;
  bool arg3 ;
  AudioProperties::ReadStyle arg4 ;
  AudioProperties::ReadStyle *argp4 ;
  File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef::FileTypeResolver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (FileName)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  argp4 = *(AudioProperties::ReadStyle **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AudioProperties::ReadStyle");
    return 0;
  }
  arg4 = *argp4; 
  result = (File *)((TagLib::FileRef::FileTypeResolver const *)arg1)->createFile(arg2,arg3,arg4);
  *(File **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1FileTypeResolver_1createFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  TagLib::FileRef::FileTypeResolver *arg1 = (TagLib::FileRef::FileTypeResolver *) 0 ;
  FileName arg2 = (FileName) 0 ;
  bool arg3 ;
  File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef::FileTypeResolver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (FileName)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (File *)((TagLib::FileRef::FileTypeResolver const *)arg1)->createFile(arg2,arg3);
  *(File **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1FileTypeResolver_1createFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  TagLib::FileRef::FileTypeResolver *arg1 = (TagLib::FileRef::FileTypeResolver *) 0 ;
  FileName arg2 = (FileName) 0 ;
  File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef::FileTypeResolver **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (FileName)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (File *)((TagLib::FileRef::FileTypeResolver const *)arg1)->createFile(arg2);
  *(File **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1FileRef_1FileTypeResolver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::FileRef::FileTypeResolver *arg1 = (TagLib::FileRef::FileTypeResolver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::FileRef::FileTypeResolver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TagLib::FileRef *)new TagLib::FileRef();
  *(TagLib::FileRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  AudioProperties::ReadStyle arg3 ;
  AudioProperties::ReadStyle *argp3 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (FileName)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  argp3 = *(AudioProperties::ReadStyle **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AudioProperties::ReadStyle");
    return 0;
  }
  arg3 = *argp3; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2,arg3);
  *(TagLib::FileRef **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (FileName)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2);
  *(TagLib::FileRef **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  FileName arg1 = (FileName) 0 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (FileName)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1);
  *(TagLib::FileRef **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IOStream *arg1 = (IOStream *) 0 ;
  bool arg2 ;
  AudioProperties::ReadStyle arg3 ;
  AudioProperties::ReadStyle *argp3 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IOStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(AudioProperties::ReadStyle **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AudioProperties::ReadStyle");
    return 0;
  }
  arg3 = *argp3; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2,arg3);
  *(TagLib::FileRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  IOStream *arg1 = (IOStream *) 0 ;
  bool arg2 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IOStream **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1,arg2);
  *(TagLib::FileRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  IOStream *arg1 = (IOStream *) 0 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IOStream **)&jarg1; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1);
  *(TagLib::FileRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  File *arg1 = (File *) 0 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(File **)&jarg1; 
  result = (TagLib::FileRef *)new TagLib::FileRef(arg1);
  *(TagLib::FileRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_new_1FileRef_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::FileRef *arg1 = 0 ;
  TagLib::FileRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::FileRef const & reference is null");
    return 0;
  } 
  result = (TagLib::FileRef *)new TagLib::FileRef((TagLib::FileRef const &)*arg1);
  *(TagLib::FileRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1FileRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1tag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::Tag *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  result = (TagLib::Tag *)((TagLib::FileRef const *)arg1)->tag();
  *(TagLib::Tag **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1GetCoverArt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  std::vector< unsigned char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  result = (arg1)->GetCoverArt();
  {
    jresult = jenv->NewByteArray((&result)->size());
    jenv->SetByteArrayRegion(jresult, 0, (&result)->size(), (jbyte *) (&result)->data());
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1audioProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  AudioProperties *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  result = (AudioProperties *)((TagLib::FileRef const *)arg1)->audioProperties();
  *(AudioProperties **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  result = (File *)((TagLib::FileRef const *)arg1)->file();
  *(File **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  result = (bool)(arg1)->save();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1addFileTypeResolver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TagLib::FileRef::FileTypeResolver *arg1 = (TagLib::FileRef::FileTypeResolver *) 0 ;
  TagLib::FileRef::FileTypeResolver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef::FileTypeResolver **)&jarg1; 
  result = (TagLib::FileRef::FileTypeResolver *)TagLib::FileRef::addFileTypeResolver((TagLib::FileRef::FileTypeResolver const *)arg1);
  *(TagLib::FileRef::FileTypeResolver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1defaultFileExtensions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TagLib::StringList result;
  
  (void)jenv;
  (void)jcls;
  result = TagLib::FileRef::defaultFileExtensions();
  *(TagLib::StringList **)&jresult = new TagLib::StringList((const TagLib::StringList &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  result = (bool)((TagLib::FileRef const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::FileRef *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  arg2 = *(TagLib::FileRef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::FileRef & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  TagLib::FileRef *arg1 = (TagLib::FileRef *) 0 ;
  TagLib::FileRef *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TagLib::FileRef **)&jarg1; 
  arg2 = *(TagLib::FileRef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TagLib::FileRef const & reference is null");
    return 0;
  } 
  result = (bool)((TagLib::FileRef const *)arg1)->operator ==((TagLib::FileRef const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  AudioProperties::ReadStyle arg3 ;
  AudioProperties::ReadStyle *argp3 ;
  File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (FileName)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  argp3 = *(AudioProperties::ReadStyle **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AudioProperties::ReadStyle");
    return 0;
  }
  arg3 = *argp3; 
  result = (File *)TagLib::FileRef::create((char const *)arg1,arg2,arg3);
  *(File **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  FileName arg1 = (FileName) 0 ;
  bool arg2 ;
  File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (FileName)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (File *)TagLib::FileRef::create((char const *)arg1,arg2);
  *(File **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_FileRef_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  FileName arg1 = (FileName) 0 ;
  File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (FileName)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (File *)TagLib::FileRef::create((char const *)arg1);
  *(File **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_myskng_taglib_taglibJNI_delete_1AudioProperties(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TagLib::AudioProperties **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_myskng_taglib_taglibJNI_AudioProperties_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::AudioProperties **)&jarg1; 
  result = (int)((TagLib::AudioProperties const *)arg1)->length();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_myskng_taglib_taglibJNI_AudioProperties_1lengthInSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::AudioProperties **)&jarg1; 
  result = (int)((TagLib::AudioProperties const *)arg1)->lengthInSeconds();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_myskng_taglib_taglibJNI_AudioProperties_1lengthInMilliseconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::AudioProperties **)&jarg1; 
  result = (int)((TagLib::AudioProperties const *)arg1)->lengthInMilliseconds();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_myskng_taglib_taglibJNI_AudioProperties_1bitrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::AudioProperties **)&jarg1; 
  result = (int)((TagLib::AudioProperties const *)arg1)->bitrate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_myskng_taglib_taglibJNI_AudioProperties_1sampleRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::AudioProperties **)&jarg1; 
  result = (int)((TagLib::AudioProperties const *)arg1)->sampleRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_myskng_taglib_taglibJNI_AudioProperties_1channels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TagLib::AudioProperties *arg1 = (TagLib::AudioProperties *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TagLib::AudioProperties **)&jarg1; 
  result = (int)((TagLib::AudioProperties const *)arg1)->channels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_myskng_taglib_taglibJNI_StringList_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(TagLib::List< String > **)&baseptr = *(TagLib::StringList **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

